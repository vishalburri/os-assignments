The Statistics by forking and sorting 10 numbers is as follows


          2.746984      task-clock (msec)         #    0.822 CPUs utilized          
                 1      context-switches          #    0.364 K/sec                  
                 2      cpu-migrations            #    0.728 K/sec                  
               100      page-faults               #    0.036 M/sec                  
         13,42,760      cycles                    #    0.489 GHz                    
   <not supported>      stalled-cycles-frontend  
   <not supported>      stalled-cycles-backend   
          9,74,169      instructions              #    0.73  insns per cycle        
          1,91,355      branches                  #   69.660 M/sec                  
             9,225      branch-misses             #    4.82% of all branches        

       0.003343742 seconds time elapsed





Whereas the statistics for normal mergesort is as follows


          0.767179      task-clock (msec)         #    0.579 CPUs utilized          
                 0      context-switches          #    0.000 K/sec                  
                 0      cpu-migrations            #    0.000 K/sec                  
                51      page-faults               #    0.066 M/sec                  
          6,83,507      cycles                    #    0.891 GHz                    
   <not supported>      stalled-cycles-frontend  
   <not supported>      stalled-cycles-backend   
          5,55,225      instructions              #    0.81  insns per cycle        
          1,11,527      branches                  #  145.373 M/sec                  
             5,825      branch-misses             #    5.22% of all branches        

       0.001325424 seconds time elapsed

Due to forking in every recursion step the process becomes very slow because for every fork it has to create a new child in the main memory which is time consuming. Hence without forking it becomes very fast.
